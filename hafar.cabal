cabal-version: 1.12

-- This file has been generated from package.yaml by hpack version 0.31.2.
--
-- see: https://github.com/sol/hpack
--
-- hash: 05f6e1686729d69b3f56067c7425b8945c6b9c1532ef02110dfe943fd7ae97a5

name:           hafar
version:        0.1.0.0
description:    Hafar is an affine arithmetic library for Haskell. Affine arithmetic is an improvement of interval arithmetic.
                = Examples The following code example shows how subtracting the same value from itself in affine arithmetic results in zero.
                @ import Numeric.Interval
                a1 = do -- Create a new instance of an affine form x <- newFromInterval $ 1...3 -- Create another instance of an affine form covering the same interval y <- newFromInterval $ 1...3 return $ x - y
                evalInterval a1 -- Interval (-2) 2
                a2 = do -- Here we only use a single instance of an affine form x <- newFromInterval $ 1...3 return $ x - x
                evalInterval a2 -- Interval 0 0 @
homepage:       https://github.com/Soupstraw/hafar#readme
bug-reports:    https://github.com/Soupstraw/hafar/issues
author:         Joosep Jääger
maintainer:     Joosep Jääger
copyright:      2020 Joosep Jääger
license:        BSD3
license-file:   LICENSE
build-type:     Simple
extra-source-files:
    README.md
    ChangeLog.md

source-repository head
  type: git
  location: https://github.com/Soupstraw/hafar

library
  exposed-modules:
      Numeric.AffineForm
      Numeric.AffineForm.Utils
  other-modules:
      Paths_hafar
  hs-source-dirs:
      src
  build-depends:
      QuickCheck >=2.13 && <3
    , base >=4.7 && <5
    , intervals >=0.8 && <1
    , mtl >=2.2 && <3
    , random >=1.1 && <2
  default-language: Haskell2010

test-suite hafar-test
  type: exitcode-stdio-1.0
  main-is: Spec.hs
  other-modules:
      Paths_hafar
  hs-source-dirs:
      test
  ghc-options: -threaded -rtsopts -with-rtsopts=-N
  build-depends:
      QuickCheck >=2.13 && <3
    , base >=4.7 && <5
    , hafar
    , intervals >=0.8 && <1
    , mtl >=2.2 && <3
    , random >=1.1 && <2
  default-language: Haskell2010
